{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "rootName": {
      "type": "string",
      "defaultValue": "ericmai-test",
      "maxLength": 25,
      "metadata": {
        "description": "A short identifier to distinguish machines in this membership"
      }
    },
    "username": {
      "type": "string",
      "defaultValue": "azureuser",
      "metadata": {
        "description": "Admin username on all VMs."
      }
    },
    "sshPublicKey": {
      "type": "string",
      "defaultValue": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDpwyBiZTkAxRRn4GF7pOIJIEcBHOF771m3f867KjUj0AxDBEpCkz1EM5yWY5yzzX2Ob6Rs6W9q8ZJmF1D++7ecz915NFZIeau9Ea1wC/rp5uWsv/xFQ53pCQw6/wcF4d+k914X9cA+B4xlHm0rYVTAzd2M69uxfmXU//d9+5pwsLlWElFvNiJCzLL1JCT5Hasd7/F0qwD361M5JMfYtQoYDa+0NlNlD42Xqwj4Ereai8aNDalgWK9KVJNwDld2TNWlFeaDYF/2zwcX1G6AiqnGtJqcZMqjTtDrDsC9okwg9PswMn+Ku94FvQvfSbjpmYaRcofPRT49/mtxKgDNiNNH testkey",
      "metadata": {
        "description": "ssh public key for connecting to VMs."
      }
    },
    "vmSku": {
      "defaultValue": "Standard_B1s",
      "type": "string"
    },
    "additionalCommands": {
      "defaultValue": {
        "Commands": []
      },
      "type": "secureObject"
    },
    "contentVersion": {
      "defaultValue": "ericmai/testing",
      "type": "string",
      "metadata": {
        "description": "The version of the templates to use. This refers to a git branch. This parameter is ignored if contentRootOverride is provided"
      }
    },
    "contentRootOverride": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Url location of root templates"
      }
    },
    "locationOverride": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Location to deploy resources. By default the template will use the Resource Group location"
      }
    }
  },
  "variables": {
    "utilityContentVersion": "Release-v3.0.0",
    "utilityContentRoot": "[concat('https://raw.githubusercontent.com/MeetEric/arm-template-utilities/', variables('utilityContentVersion'))]",
    "resourceLocations": [
      "[resourceGroup().location]",
      "[parameters('locationOverride')]"
    ],
    "contentRootUrl": "[concat('https://raw.githubusercontent.com/ericmaino/azure-templates/', parameters('contentVersion'))]",
    "contentRoots": [
      "[variables('contentRootUrl')]",
      "[parameters('contentRootOverride')]"
    ],
    "contentRoot": "[variables('contentRoots')[length(take(parameters('contentRootOverride'),1))]]",
    "resourceLocation": "[tolower(variables('resourceLocations')[length(take(parameters('locationOverride'),1))])]",
    "rootName": "[toLower(parameters('rootName'))]",
    "namingInfix": "[variables('rootName')]",
    "dNetworkName": "[concat(variables('rootName'), '.Network')]",
    "dVMSS": "[concat(variables('rootName'), '.VMSSCommands')]",
    "initCommands": [],
    "extensionName": "[concat(variables('rootName'), '.Extensions')]",
    "extensions": [
      {
        "name": "Docker-Compose",
        "extension": "docker-compose.json",
        "data": {
          "dockerComposePath": "request-bin.yaml"
        }
      }
    ],
    "defaultSecurityRules": [
      {
        "name": "allow-ssh",
        "properties": {
          "protocol": "Tcp",
          "sourcePortRange": "*",
          "destinationPortRange": "22",
          "sourceAddressPrefix": "Internet",
          "destinationAddressPrefix": "*",
          "access": "Allow",
          "priority": 100,
          "direction": "Inbound"
        }
      }
    ]
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "name": "[variables('extensionName')]",
      "apiVersion": "2021-04-01",
      "properties": {
        "templateLink": {
          "contentVersion": "1.0.0.0",
          "uri": "[concat(variables('utilityContentRoot'), '/template.extensions.json')]"
        },
        "mode": "Incremental",
        "parameters": {
          "rootName": {
            "value": "[variables('extensionName')]"
          },
          "contentRoot": {
            "value": "[variables('utilityContentRoot')]"
          },
          "extensionsRoot": {
            "value": "[concat(variables('contentRoot'), '/arm-templates/extensions')]"
          },
          "extensions": {
            "value": "[variables('extensions')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "name": "[variables('dNetworkName')]",
      "apiVersion": "2021-04-01",
      "properties": {
        "templateLink": {
          "contentVersion": "1.0.0.0",
          "uri": "[concat(variables('utilityContentRoot'), '/template.network.loadBalanced.switch.json')]"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[variables('resourceLocation')]"
          },
          "namingInfix": {
            "value": "[variables('namingInfix')]"
          },
          "subnets": {
            "value": [
              {
                "name": "default",
                "prefix": "10.0.0.0/24",
                "rules": "[concat(variables('defaultSecurityRules'), reference(variables('extensionName')).outputs.result.value.nsgRules)]"
              }
            ]
          },
          "exportRules": {
            "value": "[reference(variables('extensionName')).outputs.result.value.exports]"
          },
          "contentRoot": {
            "value": "[variables('utilityContentRoot')]"
          }
        }
      },
      "dependsOn": [ "[variables('extensionName')]" ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "name": "[variables('dVMSS')]",
      "apiVersion": "2021-04-01",
      "properties": {
        "templateLink": {
          "contentVersion": "1.0.0.0",
          "uri": "[concat(variables('utilityContentRoot'), '/template.vmss.commands.json')]"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[variables('resourceLocation')]"
          },
          "contentRoot": {
            "value": "[variables('utilityContentRoot')]"
          },
          "vmssName": {
            "value": "[concat(variables('namingInfix'), '-n')]"
          },
          "vmSku": {
            "value": "[parameters('vmSku')]"
          },
          "image": {
            "value": "Ubuntu20.04-LTS"
          },
          "instanceCount": {
            "value": 1
          },
          "username": {
            "value": "[parameters('username')]"
          },
          "sshPublicKey": {
            "value": "[parameters('sshPublicKey')]"
          },
          "commandsJson": {
            "value": {
              "Commands": "[concat(variables('initCommands'), reference(variables('extensionName')).outputs.result.value.commands)]"
            }
          },
          "networkConfiguration": {
            "value": {
              "subnet": {
                "id": "[reference(variables('dNetworkName')).outputs.network.value.subnets[0].id]"
              },
              "loadBalancerBackendAddressPools": "[reference(variables('dNetworkName')).outputs.network.value.backendPools]"
            }
          }
        }
      },
      "dependsOn": [ "[variables('dNetworkName')]" ]
    }
  ],
  "outputs": {
    "ip": {
      "type": "string",
      "value": "[reference(variables('dNetworkName')).outputs.network.value.ip]"
    }
  }
}
